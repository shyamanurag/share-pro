generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id         String   @id @db.Uuid
  email      String   @unique
  createdAt  DateTime @default(now())
  name       String?
  avatarUrl  String?
  balance    Float    @default(10000) // Default virtual money for paper trading
  portfolios Portfolio[]
  watchlists Watchlist[]
  transactions Transaction[]
}

model Stock {
  id            String   @id @default(uuid())
  symbol        String   @unique
  name          String
  currentPrice  Float
  previousClose Float
  change        Float
  changePercent Float
  volume        Int
  marketCap     Float?
  sector        String?
  updatedAt     DateTime @default(now())
  watchlistItems WatchlistItem[]
  portfolioItems PortfolioItem[]
  transactions   Transaction[]
}

model Watchlist {
  id        String   @id @default(uuid())
  name      String
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  items     WatchlistItem[]
}

model WatchlistItem {
  id          String   @id @default(uuid())
  watchlistId String
  stockId     String
  addedAt     DateTime @default(now())
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  stock       Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, stockId])
}

model Portfolio {
  id        String   @id @default(uuid())
  name      String
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  items     PortfolioItem[]
}

model PortfolioItem {
  id          String   @id @default(uuid())
  portfolioId String
  stockId     String
  quantity    Int
  avgBuyPrice Float
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  stock       Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, stockId])
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid
  stockId   String
  type      String   // "BUY" or "SELL"
  quantity  Int
  price     Float
  total     Float
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  stock     Stock    @relation(fields: [stockId], references: [id])
}